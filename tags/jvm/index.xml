<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>jvm on 宋惠龙的博客</title>
    <link>https://redolog.github.io/tags/jvm/</link>
    <description>Recent content in jvm on 宋惠龙的博客</description>
    <image>
      <url>https://redolog.github.io/avatar.png</url>
      <link>https://redolog.github.io/avatar.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 15 Sep 2023 09:36:25 +0800</lastBuildDate><atom:link href="https://redolog.github.io/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>aviator动态创建类过多导致元空间内存泄漏 问题一例</title>
      <link>https://redolog.github.io/posts/rd/troubleshoot/jvm/memory-leak/aviator/</link>
      <pubDate>Fri, 15 Sep 2023 09:36:25 +0800</pubDate>
      
      <guid>https://redolog.github.io/posts/rd/troubleshoot/jvm/memory-leak/aviator/</guid>
      <description>&lt;p&gt;协助同事排查处理了一则&lt;code&gt;aviator&lt;/code&gt;使用不当导致元空间内存泄漏的问题，个人觉得是一则很有价值的案例，因此观摩学习一波。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;aviator&lt;/code&gt;不启用表达式缓存的情况下，会分别在编译、解析阶段根据时间戳使用&lt;code&gt;asm&lt;/code&gt;动态生成&lt;code&gt;class&lt;/code&gt;，生成过多&lt;code&gt;class&lt;/code&gt;就会撑爆元空间，也就是内存泄漏。&lt;/p&gt;
&lt;p&gt;除此之外，在分析过程中还发现了&lt;code&gt;aviator&lt;/code&gt;低版本的另一个泄漏问题，非常适合用来巩固&lt;code&gt;jvm&lt;/code&gt;相关知识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>踩坑更改了javaagent路径导致idea无法启动问题一例</title>
      <link>https://redolog.github.io/posts/rd/troubleshoot/ide/jetbrains/boot-with-java-agent/crash/</link>
      <pubDate>Fri, 24 Mar 2023 13:06:25 +0800</pubDate>
      
      <guid>https://redolog.github.io/posts/rd/troubleshoot/ide/jetbrains/boot-with-java-agent/crash/</guid>
      <description>&lt;p&gt;踩坑，新机器装开发环境，因手动变更了已配置好的&lt;code&gt;idea&lt;/code&gt;启动依赖的&lt;code&gt;agent&lt;/code&gt;路径，导致&lt;code&gt;jetbrains&lt;/code&gt;全系产品无法启动。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>young gc stw pause引发接口超时问题一例</title>
      <link>https://redolog.github.io/posts/rd/troubleshoot/young-gc-insufficient-memory/</link>
      <pubDate>Wed, 02 Nov 2022 21:30:25 +0800</pubDate>
      
      <guid>https://redolog.github.io/posts/rd/troubleshoot/young-gc-insufficient-memory/</guid>
      <description>&lt;p&gt;分析排查一则接口超时问题，定位为&lt;code&gt;JVM&lt;/code&gt; &lt;code&gt;Young&lt;/code&gt;区新生代过小引发GC频繁、触发&lt;code&gt;STW&lt;/code&gt;停顿过多。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
